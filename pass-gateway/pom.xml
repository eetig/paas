<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>paascloud</artifactId>
        <groupId>org.eetig</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>paas-gateway</artifactId>
    <version>1.0-SNAPSHOT</version>

    <packaging>jar</packaging>


    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <!--        配置类：分两个角色，一是config server，二是config client ； 类似 前端-后段-数据库的结构   -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>

        <!--        actuator是监控系统健康情况的工具：3个端点，/configprops /autoconfig /beans /env /info /mappings
                                                        /dump /health
                                                        /autoconfig
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!--        网关：是一个网络整体系统中的前置门户入口：请求首先通过网关，进行路径的路由，定位到具体的服务节点上
                        微服务数量较多（多于10个）的时候推荐使用
                        对服务的管理有严格要求的时候推荐使用，
                        当微服务权限要求严格的时候推荐使用
                    作用：1 统一入口：未全部为服务提供一个唯一的入口，网关起到外部和内部隔离的作用，保障了后台服务的安全性。
                        2 鉴权校验：识别每个请求的权限，拒绝不符合要求的请求。
                        3 动态路由：动态的将请求路由到不同的后端集群中。
                        4 减少客户端与服务端的耦合：服务可以独立发展，通过网关层来做映射
        -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-zuul</artifactId>
        </dependency>

        <!--        自定义工具类-->
        <dependency>
            <groupId>org.eetig</groupId>
            <artifactId>paas-common-util</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.eetig</groupId>
            <artifactId>paas-common-core</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>


        <!--    将actuator中的信息可视化-->
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
        </dependency>

        <!--        权限认证-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-security</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-oauth2</artifactId>
        </dependency>

        <!--        JSON Web Token (JWT)，是在网络应用间传递信息的一种基于 JSON的开放标准-->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-jwt</artifactId>
        </dependency>

        <!-- swagger2聚合网关 -->
        <dependency>
            <groupId>com.didispace</groupId>
            <artifactId>swagger-butler-core</artifactId>
            <version>1.1.0</version>
        </dependency>

        <!--    Zipkin是一个链路跟踪工具，可以用来监控微服务集群中调用链路的通畅情况
                   例如： gateway，user，blog；其中gateway的hello接口通过RestTemplate调用了user的hello接口,
                        user的hello接口通过Feign调用blog的hi接口
                    可以通过zipkin进行可视化
        -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-zipkin</artifactId>
        </dependency>

        <!--        目前mq中,spring对rabbit做了很好的封装。 rabbit有5种队列:简单队列、work队列、订阅模式、路由模式、通配符模式-->
        <dependency>
            <groupId>org.springframework.amqp</groupId>
            <artifactId>spring-rabbit</artifactId>
        </dependency>
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.10</version>
        </dependency>

    </dependencies>

    <build>
        <finalName>${artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- 添加docker-maven插件 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.1.0</version>
                <configuration>
                    <imageName>${project.artifactId}:${project.version}</imageName>
                    <baseImage>java</baseImage>
                    <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <dockerHost>http://172.16.124.133:2375</dockerHost>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>